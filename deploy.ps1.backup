# Complete Azure Alert Deduplication Solution Deployment
# This script deploys the entire secure solution with enhanced user managed identity setup

param(
    [string]$ResourceGroup = "rg-alert-dedup-v2",
    [string]$Location = "westus2", 
    [string]$EnvironmentName = "v2"
)

# Set error action preference to stop on errors
$ErrorActionPref    # Verify secrets were stored successfully
    Write-Host "Verifying stored secrets..." -ForegroundColor Yellow
    $secretTest = az keyvault secret show --vault-name $keyVaultName --name "storage-account-name" --query "value" --output tsv 2>$null
    if ($secretTest -eq $storageAccountName) {
        Write-Host "   ✓ All secrets verified successfully" -ForegroundColor Green
    } else {
        Write-Warning "   ⚠ Secret verification failed, but secrets may still be accessible"
    } "Stop"

Write-Host "Deploying Complete Azure Alert Deduplication Solution..." -ForegroundColor Cyan
Write-Host "========================================================" -ForegroundColor Cyan

# Get subscription info
try {
    $subscriptionInfo = az account show | ConvertFrom-Json
    $subscriptionId = $subscriptionInfo.id
    $currentUser = $subscriptionInfo.user.name
    Write-Host "Using subscription: $subscriptionId" -ForegroundColor Yellow
    Write-Host "Deploying as user: $currentUser" -ForegroundColor Yellow
}
catch {
    Write-Error "Failed to get Azure subscription info. Please ensure you're logged in with 'az login'"
}

# Create resource group
Write-Host "Creating resource group..." -ForegroundColor Blue
try {
    az group create --name $ResourceGroup --location $Location --tags "azd-env-name=$EnvironmentName" --output none
    Write-Host "Resource group created successfully" -ForegroundColor Green
}
catch {
    Write-Error "Failed to create resource group: $_"
}

# Deploy infrastructure with enhanced security
Write-Host "Deploying secure Key Vault infrastructure with user managed identity..." -ForegroundColor Blue
try {
    $deploymentResult = az deployment group create `
        --resource-group $ResourceGroup `
        --template-file "infrastructure\main-keyvault.bicep" `
        --parameters "infrastructure\main.parameters.json" `
        --query "properties.outputs" `
        --output json | ConvertFrom-Json

    # Extract deployment outputs
    $storageAccountName = $deploymentResult.storageAccountName.value
    $logicAppName = $deploymentResult.logicAppName.value
    $appServiceName = $deploymentResult.appServiceName.value
    $appServiceUrl = $deploymentResult.appServiceUrl.value
    $actionGroupName = $deploymentResult.actionGroupName.value
    $keyVaultName = $deploymentResult.keyVaultName.value
    $keyVaultUri = $deploymentResult.keyVaultUri.value

    Write-Host "Infrastructure deployed successfully!" -ForegroundColor Green
    Write-Host "   Storage Account: $storageAccountName" -ForegroundColor White
    Write-Host "   Logic App: $logicAppName" -ForegroundColor White
    Write-Host "   App Service: $appServiceName" -ForegroundColor White
    Write-Host "   App Service URL: $appServiceUrl" -ForegroundColor White
    Write-Host "   Key Vault: $keyVaultName" -ForegroundColor White
}
catch {
    Write-Error "Failed to deploy infrastructure: $_"
}

# Configure RBAC permissions for Key Vault access
Write-Host "Configuring Key Vault RBAC permissions..." -ForegroundColor Blue
try {
    # Get current user principal ID for RBAC assignment
    $currentUser = az account show --query "user.name" --output tsv
    
    Write-Host "Adding Key Vault Secrets Officer role to current user ($currentUser)..." -ForegroundColor Yellow
    
    # Add Key Vault Secrets Officer role for the current user
    $keyVaultResourceId = "/subscriptions/$($subscriptionId)/resourcegroups/$($ResourceGroup)/providers/microsoft.keyvault/vaults/$($keyVaultName)"
    
    $roleAssignmentResult = az role assignment create `
        --assignee $currentUser `
        --role "Key Vault Secrets Officer" `
        --scope $keyVaultResourceId `
        --output json 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "RBAC permissions configured successfully!" -ForegroundColor Green
    } else {
        Write-Warning "Role assignment may already exist or there was an issue. Continuing deployment..."
    }
    
    # Wait for RBAC propagation
    Write-Host "Waiting for RBAC propagation..." -ForegroundColor Yellow
    Start-Sleep -Seconds 15
}
catch {
    Write-Warning "Failed to configure RBAC permissions: $_. You may need to manually add Key Vault Secrets Officer role."
}

# Deploy Mock ServiceNow API
Write-Host "Deploying Mock ServiceNow API..." -ForegroundColor Blue
try {
    # Get App Service name from resource group (in case variable is not available)
    if ([string]::IsNullOrEmpty($appServiceName)) {
        $appServiceName = az webapp list --resource-group $ResourceGroup --query "[?contains(name, 'mockservicenow-v2')].name" --output tsv
        if ([string]::IsNullOrEmpty($appServiceName)) {
            throw "Failed to find App Service in resource group $ResourceGroup"
        }
    }
    
    Write-Host "Using App Service: $appServiceName" -ForegroundColor Green
    
    # Try Git-based deployment first (more reliable for Node.js)
    Write-Host "Setting up Git deployment for App Service..." -ForegroundColor Yellow
    
    try {
        # Configure App Service for local Git deployment
        az webapp deployment source config-local-git `
            --resource-group $ResourceGroup `
            --name $appServiceName `
            --output tsv 2>$null
        
        # Get deployment credentials
        $deployUser = az webapp deployment list-publishing-credentials `
            --resource-group $ResourceGroup `
            --name $appServiceName `
            --query publishingUserName `
            --output tsv
        
        $deployPassword = az webapp deployment list-publishing-credentials `
            --resource-group $ResourceGroup `
            --name $appServiceName `
            --query publishingPassword `
            --output tsv
        
        # Setup Git repository in mock-servicenow folder
        Push-Location "mock-servicenow"
        
        # Initialize git repo if not exists
        if (-not (Test-Path ".git")) {
            git init
            git config user.email "deploy@example.com"
            git config user.name "Deploy User"
            
            # Create .gitignore to exclude unnecessary files
            @"
node_modules/
*.log
.env
*.zip
.webhook-url.txt
"@ | Out-File -FilePath ".gitignore" -Encoding utf8
        }
        
        # Add and commit files
        git add .
        git commit -m "Deploy mock ServiceNow app" 2>$null
        
        # Get the Git URL
        $gitUrl = "https://${deployUser}:${deployPassword}@${appServiceName}.scm.azurewebsites.net/${appServiceName}.git"
        
        # Add remote and push
        git remote remove azure 2>$null
        git remote add azure $gitUrl
        
        Write-Host "Deploying via Git..." -ForegroundColor Yellow
        git push azure master --force
        
        Pop-Location
        
        Write-Host "Git deployment completed!" -ForegroundColor Green
    }
    catch {
        Write-Host "Git deployment failed, falling back to zip deployment..." -ForegroundColor Yellow
        
        Pop-Location
        
        # Fallback to zip deployment with minimal files
        Push-Location "mock-servicenow"
        
        # Remove existing zip if it exists
        $zipPath = "..\mock-servicenow.zip"
        if (Test-Path $zipPath) {
            Remove-Item $zipPath -Force
        }
        
        # Create zip with only essential files (no node_modules)
        $essentialFiles = @("server.js", "package.json", "web.config")
        $filesToZip = @()
        foreach ($file in $essentialFiles) {
            if (Test-Path $file) {
                $filesToZip += Get-Item $file
            }
        }
        
        Compress-Archive -Path $filesToZip -DestinationPath $zipPath -Force
        
        Pop-Location

        # Deploy to App Service using the newer az webapp deploy command
        Write-Host "Deploying minimal zip file to App Service..." -ForegroundColor Yellow
        az webapp deploy `
            --resource-group $ResourceGroup `
            --name $appServiceName `
            --src-path "mock-servicenow.zip" `
            --type zip `
            --output none
            
        Write-Host "Note: Dependencies will be installed automatically by App Service" -ForegroundColor Cyan
    }

    # Clean up zip file
    Remove-Item "mock-servicenow.zip" -Force

    Write-Host "Mock ServiceNow deployed successfully" -ForegroundColor Green
}
catch {
    Write-Error "Failed to deploy Mock ServiceNow: $_"
}

Write-Host "Waiting for App Service deployment..." -ForegroundColor Yellow
Start-Sleep -Seconds 15

# Test App Service
$appServiceHealthy = $false
for ($i = 1; $i -le 5; $i++) {
    Write-Host "   Testing App Service (attempt $i/5)..." -ForegroundColor Yellow
    try {
        $response = Invoke-WebRequest -Uri $appServiceUrl -TimeoutSec 10 -UseBasicParsing
        if ($response.Content -match "Mock ServiceNow Dashboard") {
            Write-Host "App Service is healthy!" -ForegroundColor Green
            $appServiceHealthy = $true
            break
        }
    }
    catch {
        Write-Host "   Still starting up..." -ForegroundColor Yellow
        Start-Sleep -Seconds 10
    }
}

if (-not $appServiceHealthy) {
    Write-Warning "App Service may not be fully ready, but continuing deployment..."
}

# Verify Key Vault and managed identity are working
Write-Host "Verifying Key Vault and managed identity access..." -ForegroundColor Blue
Write-Host "   Waiting for RBAC propagation..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Get webhook URL (Logic App is already deployed with the workflow)
Write-Host "Getting Logic App webhook URL..." -ForegroundColor Blue
try {
    # Get Logic App name from resource group (in case variable is not available)
    if ([string]::IsNullOrEmpty($logicAppName)) {
        $logicAppName = az logic workflow list --resource-group $ResourceGroup --query "[?contains(name, 'alertdedup-v2')].name" --output tsv
        if ([string]::IsNullOrEmpty($logicAppName)) {
            throw "Failed to find Logic App in resource group $ResourceGroup"
        }
    }
    
    Write-Host "Using Logic App: $logicAppName" -ForegroundColor Green
    
    $webhookUrl = az rest --method POST `
        --url "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$ResourceGroup/providers/Microsoft.Logic/workflows/$logicAppName/triggers/manual/listCallbackUrl?api-version=2016-06-01" `
        --query "value" `
        --output tsv

    $webhookUrl | Out-File -FilePath ".webhook-url.txt" -Encoding utf8
    Write-Host "Webhook URL saved to .webhook-url.txt" -ForegroundColor Green
}
catch {
    Write-Error "Failed to get webhook URL: $_"
}

# Update Action Group with webhook
Write-Host "Updating Action Group with Logic App webhook..." -ForegroundColor Blue
try {
    # Get Action Group name from resource group (in case variable is not available)
    if ([string]::IsNullOrEmpty($actionGroupName)) {
        $actionGroupName = az monitor action-group list --resource-group $ResourceGroup --query "[?contains(name, 'ag-cdn-alerts-v2')].name" --output tsv
        if ([string]::IsNullOrEmpty($actionGroupName)) {
            throw "Failed to find Action Group in resource group $ResourceGroup"
        }
    }
    
    Write-Host "Using Action Group: $actionGroupName" -ForegroundColor Green
    
    az monitor action-group update `
        --resource-group $ResourceGroup `
        --name $actionGroupName `
        --add-action webhook LogicAppWebhook $webhookUrl `
        --output none

    Write-Host "Action Group updated successfully!" -ForegroundColor Green
}
catch {
    Write-Error "Failed to update Action Group: $_"
}

# Store storage account credentials in Key Vault for testing scripts
Write-Host ""
Write-Host "Storing storage account credentials in Key Vault..." -ForegroundColor Yellow
try {
    # Get storage account name from resource group (in case variable is not available)
    if ([string]::IsNullOrEmpty($storageAccountName)) {
        $storageAccountName = az storage account list --resource-group $ResourceGroup --query "[?contains(name, 'dedupv2')].name" --output tsv
        if ([string]::IsNullOrEmpty($storageAccountName)) {
            throw "Failed to find storage account in resource group $ResourceGroup"
        }
    }
    
    # Get Key Vault name from deployment result or resource group
    if ([string]::IsNullOrEmpty($keyVaultName)) {
        $keyVaultName = az keyvault list --resource-group $ResourceGroup --query "[?starts_with(name, 'kv-v2-')].name" --output tsv
        if ([string]::IsNullOrEmpty($keyVaultName)) {
            throw "Failed to find Key Vault in resource group $ResourceGroup"
        }
    }
    
    Write-Host "Using Storage Account: $storageAccountName" -ForegroundColor Green
    Write-Host "Using Key Vault: $keyVaultName" -ForegroundColor Green
    
    # Get storage account key
    $storageKey = az storage account keys list --resource-group $ResourceGroup --account-name $storageAccountName --query '[0].value' --output tsv
    
    if ([string]::IsNullOrEmpty($storageKey)) {
        throw "Failed to retrieve storage account key"
    }
    
    # Store storage account name as secret
    Write-Host "   Storing storage-account-name secret..." -ForegroundColor Yellow
    az keyvault secret set --vault-name $keyVaultName --name "storage-account-name" --value $storageAccountName --output none
    
    if ($LASTEXITCODE -ne 0) {
        throw "Failed to store storage-account-name secret in Key Vault"
    }
    
    # Store storage account key as secret  
    Write-Host "   Storing storage-account-key secret..." -ForegroundColor Yellow
    az keyvault secret set --vault-name $keyVaultName --name "storage-account-key" --value $storageKey --output none
    
    if ($LASTEXITCODE -ne 0) {
        throw "Failed to store storage-account-key secret in Key Vault"
    }
    
    # Store table name as secret
    Write-Host "   Storing storage-table-name secret..." -ForegroundColor Yellow
    az keyvault secret set --vault-name $keyVaultName --name "storage-table-name" --value "AlertDeduplication" --output none
    
    if ($LASTEXITCODE -ne 0) {
        throw "Failed to store storage-table-name secret in Key Vault"
    }
    
    Write-Host "Storage credentials stored in Key Vault successfully!" -ForegroundColor Green
    
    # Verify secrets were stored successfully
    Write-Host "Verifying stored secrets..." -ForegroundColor Yellow
    $secretTest = az keyvault secret show --vault-name $keyVaultName --name "storage-account-name" --query "value" --output tsv 2>$null
    if ($secretTest -eq $storageAccountName) {
        Write-Host "   âœ“ All secrets verified successfully" -ForegroundColor Green
    } else {
        Write-Warning "   âš  Secret verification failed, but secrets may still be accessible"
    }
}
catch {
    Write-Error "Failed to store credentials in Key Vault: $_"
    Write-Host "You may need to manually store the secrets or check Key Vault permissions." -ForegroundColor Yellow
}

# Display completion summary
Write-Host ""
Write-Host "DEPLOYMENT COMPLETE!" -ForegroundColor Green
Write-Host "=======================================" -ForegroundColor Green
Write-Host ""
Write-Host "Infrastructure:" -ForegroundColor Cyan
Write-Host "   Logic App: $logicAppName" -ForegroundColor White
Write-Host "   Storage Account: $storageAccountName" -ForegroundColor White
Write-Host "   Key Vault: $keyVaultName" -ForegroundColor White
Write-Host "   App Service: $appServiceName" -ForegroundColor White
Write-Host "   Action Group: $actionGroupName" -ForegroundColor White
Write-Host ""
Write-Host "URLs:" -ForegroundColor Cyan
Write-Host "   Mock ServiceNow Dashboard: $appServiceUrl" -ForegroundColor White
Write-Host "   Logic App Webhook: $webhookUrl" -ForegroundColor White
Write-Host ""
Write-Host "Next Steps:" -ForegroundColor Cyan
Write-Host "   1. Test the solution: .\test-azure-solution.ps1" -ForegroundColor White
Write-Host "   2. Query deduplication records: .\query-deduplication-table.ps1" -ForegroundColor White
Write-Host "   3. Clear deduplication table: .\clear-deduplication-table.ps1" -ForegroundColor White
Write-Host "   4. Check mock ServiceNow dashboard: $appServiceUrl" -ForegroundColor White
Write-Host ""
Write-Host "Solution deployed with enhanced security:" -ForegroundColor Green
Write-Host "   - User-assigned managed identity for Logic App" -ForegroundColor White
Write-Host "   - Secure Key Vault access with RBAC" -ForegroundColor White
Write-Host "   - Storage credentials stored in Key Vault" -ForegroundColor White
Write-Host "Security Features:" -ForegroundColor Green
Write-Host "   - Azure Key Vault for secret storage" -ForegroundColor White
Write-Host "   - Managed Identity authentication" -ForegroundColor White
Write-Host "   - RBAC authorization" -ForegroundColor White
Write-Host "   - Zero hardcoded secrets in scripts" -ForegroundColor White
Write-Host "   - Storage credentials secured in Key Vault" -ForegroundColor White
Write-Host ""
Write-Host "Ready for testing!" -ForegroundColor Green
